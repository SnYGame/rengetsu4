package org.snygame.rengetsu.data;

import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;

public class QueryBuilder {
    private ArrayList<Parameter> parameters;

    private String select;
    private String from;
    private ArrayList<String> where;
    private ArrayList<String> orderBy;
    private Integer limit;
    private Integer offset;

    private String insert;
    private boolean ignore;
    private ArrayList<String> values;

    private String delete;

    private String update;
    private ArrayList<String> set;

    public QueryBuilder() {
        where = new ArrayList<>();
        parameters = new ArrayList<>();
        orderBy = new ArrayList<>();
        values = new ArrayList<>();
        set = new ArrayList<>();
    }

    public void select(String columns) {
        select = columns;
    }

    public void from(String table) {
        from = table;
    }

    public void where(String... conditions) {
        Collections.addAll(this.where, conditions);
    }

    public void addParameter(Object parameter, int type) {
        parameters.add(new Parameter(parameter, type));
    }

    public void orderBy(String... order) {
        Collections.addAll(orderBy, order);
    }

    public void limit(int amount) {
        limit = amount;
    }

    public void offset(int amount) {
        offset = amount;
    }

    public void insertInto(String table) {
        insert = table;
        ignore = false;
    }

    public void insertIgnoreInto(String table) {
        insert = table;
        ignore = true;
    }

    public void values(String... values) {
        Collections.addAll(this.values, values);
    }

    public void deleteFrom(String table) {
        delete = table;
    }

    public void update(String table) {
        update = table;
    }

    public void set(String... values) {
        Collections.addAll(set, values);
    }

    public PreparedStatement build(Connection connection) throws SQLException {
        return build(connection, 0);
    }

    public PreparedStatement build(Connection connection, int autoGeneratedKeys) throws SQLException {
        String query = asString();

        PreparedStatement ps = connection.prepareStatement(query, autoGeneratedKeys);

        int i;
        for (i = 0; i < parameters.size(); i++) {
            Parameter param = parameters.get(i);
            switch (param.type) {
                case Types.INTEGER:
                    ps.setLong(i + 1, (Long)param.parameter);
                    break;
                case Types.BIGINT:
                    ps.setBigDecimal(i + 1, (BigDecimal)param.parameter);
                    break;
                case Types.CHAR:
                case Types.VARCHAR:
                    ps.setString(i + 1, (String)param.parameter);
                    break;
                case Types.BOOLEAN:
                    ps.setBoolean(i + 1, (Boolean)param.parameter);
                    break;
                case Types.TIMESTAMP:
                    ps.setTimestamp(i + 1, (Timestamp)param.parameter);
                    break;
            }
        }

        if (limit != null) {
            ps.setInt(++i, limit);
        }

        if (offset != null) {
            ps.setInt(++i, offset);
        }

        return ps;
    }

    public String asString() {
        if (insert != null) {
            return insertString();
        }

        if (select != null) {
            return selectString();
        }

        if (delete != null) {
            return deleteString();
        }

        if (update != null) {
            return updateString();
        }

        throw new IllegalStateException("No valid queries can be created.");
    }

    private String selectString() {
        StringBuilder sb = new StringBuilder("SELECT " + select + "\nFROM " + from);

        appendList(sb, where, "\nWHERE ", " AND ");
        appendList(sb, orderBy, "\nORDER BY ", ", ");

        if (limit != null) {
            sb.append("\nLIMIT ?");
        }

        if (offset != null) {
            sb.append("\nOFFSET ?");
        }

        return sb.toString();
    }

    private String insertString() {
        StringBuilder sb = new StringBuilder("INSERT" + (ignore ? " OR IGNORE" : "") + " INTO " + insert);

        if (select != null) {
            sb.append("\n");
            return sb.toString() + selectString();
        }

        appendList(sb, values, " VALUES ", ",\n");
        return sb.toString();
    }

    private String deleteString() {
        StringBuilder sb = new StringBuilder("DELETE FROM " + delete);
        appendList(sb, where, "\nWHERE ", " AND ");

        return sb.toString();
    }

    private String updateString() {
        StringBuilder sb = new StringBuilder("UPDATE " + update);
        appendList(sb, set, "\nSET ", ", ");
        appendList(sb, where, "\nWHERE ", " AND ");
        return sb.toString();
    }

    public void appendParameters(QueryBuilder qb) {
        parameters.addAll(qb.parameters);

        if (qb.limit != null) {
            parameters.add(new Parameter(qb.limit, Types.INTEGER));
        }

        if (qb.offset != null) {
            parameters.add(new Parameter(qb.offset, Types.INTEGER));
        }
    }

    private void appendList(StringBuilder sb, ArrayList<String> list, String clause, String seperator) {
        if (list.size() > 0) {
            sb.append(clause);
            for (int i = 0; i < list.size(); i++) {
                if (i != 0) {
                    sb.append(seperator);
                }
                sb.append(list.get(i));
            }
        }
    }

    private static class Parameter {
        public Object parameter;
        public int type;

        public Parameter(Object parameter, int type) {
            this.parameter = parameter;
            this.type = type;
        }
    }
}